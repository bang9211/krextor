<?xml version="1.0" encoding="UTF-8"?>

<uxcutor>
	<service name="clicktocall" id="1">
		<functions>
			<function name="log_msg" acttype="LUA">
				<parameter name="message" type="char*"/>
				<![CDATA[
					local message = uxc_sdmvars.get(sdmvars, 0);
					ux_log.always(message);
				]]>
			</function>
			<function name="dump_sdm" acttype="LUA"> <![CDATA[
				local sess = uxc_sdmvars.get_sess(sdmvars);
				sess:dump();
			]]></function>
			<script><![CDATA[
				ux_log.always("http server is initialized");
			]]></script>

			<function name="parse_startreq" acttype="LUA">
				<parameter name="text" type="char*"/>
				<![CDATA[
					local cjson = require "cjson"

					local text = uxc_sdmvars.get(sdmvars, 0)
					local startReq = cjson.decode(text)

					local sess = uxc_sdmvars.get_sess(sdmvars)
                    local sessval = sess:get_root()
					sessval.session_id = startReq.sessionID
					sessval.subscriber_name = startReq.subscriberName
					sessval.calling_number = startReq.callingNumber
					sessval.called_number = startReq.calledNumber
					sessval.charging_number = startReq.chargingNumber
					sessval.ringbacktone_type = startReq.ringBackToneType
					sessval.waiting_mentid = startReq.waitingMentID
					sessval.call_mentid = startReq.callMentID
					sessval.calling_cid = startReq.callingCID
					sessval.called_cid = startReq.calledCID
					sessval.host_code = startReq.hostCode

					ux_log.always("calling=%s", startReq.CallingNumber)
					ux_log.always("sessval.called_number=%s", sessval.called_number)
				]]>
			</function>

			<function name="parse_stopreq" acttype="LUA">
				<parameter name="text" type="char*"/>
				<![CDATA[
					local cjson = require "cjson"

					local text = uxc_sdmvars.get(sdmvars, 0);
					local stopReq = cjson.decode(text)

					local sess = uxc_sdmvars.get_sess(sdmvars)
                    local sessval = sess:get_root()
					sessval.session_id = stopReq.sessionID

					ux_log.always("session_id=%s", stopReq.sessionID);
					ux_log.always("sessval.session_id=%s", sessval.session_id);
				]]>
			</function>

		</functions>
		<mmfs>
			<mmf name="httpreq" protocol="HTTP" operation="POST">
				<map mparam=":authority" value="authority"/>
			</mmf>
		</mmfs>

		<variables>
			<member name="waitTime" type="int" value="3000"/>
		</variables>
		<session>
			<member name="authority" type="char[256]"/>
			<member name="result" type="int"/>
			<member name="thread_id" type="int"/>
			<member name="conn_id" type="int"/>
			<member name="stream_id" type="int"/>
			<member name="version" type="int"/>
			<member name="body" type="char[1024]"/>
			<member name="session_id" type="char[64]"/>
			<member name="subscriber_name" type="char[16]"/>
			<member name="calling_number" type="char[12]"/>
			<member name="called_number" type="char[12]"/>
			<member name="charging_number" type="char[12]"/>
			<member name="ringbacktone_type" type="int"/>
			<member name="waiting_mentid" type="char[8]"/>
			<member name="call_mentid" type="char[8]"/>
			<member name="calling_cid" type="char[12]"/>
			<member name="called_cid" type="char[12]"/>
			<member name="host_code" type="int"/>
			<member name="start_rsp" type="char[256]"/>
			<member name="status" type="int"/>
			<member name="call_id" type="char[64]"/>
			<member name="from" type="char[64]"/>
			<member name="ltag" type="char[64]"/>
			<member name="to" type="char[64]"/>
			<member name="cseq" type="int"/>
		</session>

		<fsm onerror="stop" ontimeout="stop">
			<start name="start">
				<onrecv target="RECV_CLICKTOCALL_START"/>
			</start>

			<recv name="RECV_CLICKTOCALL_START" protocol="HTTP" operation="POST" url="/clicktocall/start" is_req="yes" did="0">
				<oncall mmf="httpreq">
					<call type="SYS" function="upa_httpcall_read_ids(thread_id, conn_id, stream_id, version)"/>
					<call type="SYS" function="upa_httpcall_get_body(body)"/>
					<call function="parse_startreq(body)"/>
				</oncall>
				<onsuccess>
					<call function="log_msg('SUCCESS')"/>
				</onsuccess>
				<onerror target="stop">
					<call function="log_msg('ERROR')"/>
				</onerror>
			</recv>
			<send name="SEND_CLICKTOCALL_START_RSP" protocol="HTTP" operation="POST" rcode="200" phrase="OK" did="0">
				<oncall>
					<call type="LUA">
						<![CDATA[
							local cjson = require "cjson"
							local sess = uxc_sdmvars.get_sess(sdmvars)
                    		local sessval = sess:get_root()
							local sessid = sess:get_id()
							local rsp = {}
							rsp.gwSessionID = sessid
							local text = cjson.encode(rsp)
							sessval.start_rsp = text
							ux_log.always("sessval.start_rsp=%s", sessval.start_rsp);
						]]>
					</call>
					<call type="SYS" function="upa_httpcall_write_ids(thread_id, conn_id, stream_id, version)"/>
					<call type="SYS" function="upa_httpcall_set_header('Agent', 0, 'UANGEL')"/>
					<call type="SYS" function="upa_httpcall_set_body( start_rsp, 'application/json')"/>
				</oncall>
			</send>

			<send name="SEND_INVITE_TO_CALLING" protocol="SIP" operation="INVITE" is_req="yes">
                <oncall>
                    <call type="SYS" function="gw_dlgsvc_on_send_outgoing_req('INVITE', 'sip:07076008398@127.0.0.1:5068;ServiceKey=99;DP=12', 'sip:1004@127.0.0.1', 'sip:07076008398@127.0.0.1')"/>
                </oncall>
                <onerror target="stop"/>
            </send>

			<wait name="CALLING_PROCEEDING" timeout="180000">
				<onrecv target="RECV_INVITE_RSP"/>
				<onerror target="stop"/>
			</wait>

			<recv name="RECV_INVITE_RSP" protocol="SIP" operation="INVITE" is_req="no">
				<oncall>
					<call type="SYS" function="gw_dlgsvc_on_recv_initial_rsp(status)"/>
				</oncall>
			</recv>
			<switch name="CHECK_INVITE_RSP" value="status">
				<case value="100" target="CALLING_PROCEEDING"/>
				<case value="180" target="CALLING_PROCEEDING"/>
				<case value="200" target="SEND_CLICKTOCALL_NOTI"/>
				<default target="stop"/>
			</switch>

			<invoke name="SEND_CLICKTOCALL_NOTI" protocol="HTTP" operation="POST" url="http://192.168.1.74:18443/clicktocall/notify" version="1.0" timeout="5000" is_req="yes">
				<oncall>
					<call type="SYS" function="upa_httpcall_set_header('Agent', 0, 'UANGEL')"/>
					<call type="SYS" function="upa_httpcall_set_body( '{}', 'application/json')"/>
				</oncall>

				<onsuccess>
					<call function="log_msg('SUCCESS')"/>
					<call type="SYS" function="upa_httpcall_get_body(body)"/>
					<call function="dump_sdm()"/>
				</onsuccess>
				<onerror target="stop">
					<call function="log_msg('ERROR')"/>
				</onerror>
				<ontimeout target="stop">
					<call function="log_msg('TIMEOUT')"/>
				</ontimeout>
			</invoke>

			<send name="SEND_ACK" protocol="SIP" operation="ACK" is_req="yes">
				<oncall>
                    <call type="SYS" function="gw_dlgsvc_on_send_outgoing_req('ACK', 'sip:07076008398@127.0.0.1:5068', 'sip:1004@127.0.0.1', 'sip:07076008398@127.0.0.1')"/>
                </oncall>
                <onerror target="stop"/>
			</send>

			<wait name="CALL_ESTABLISHED" timeout="180000">
				<onrecv target="RECV_CLICKTOCALL_STOP"/>
				<onrecv target="RECV_BYE"/>
				<onerror target="stop"/>
			</wait>

			<recv name="RECV_BYE" protocol="SIP" operation="BYE" is_req="yes">
			</recv>

			<send name="SEND_BYE_RSP" protocol="SIP" operation="BYE" is_req="no">
				<oncall>
					<call type="SYS" function="gw_dlgsvc_on_send_rsp(200)"/>
				</oncall>
				<onsuccess target="SEND_CLICKTOCALL_RES"/>
			</send>
			

			<recv name="RECV_CLICKTOCALL_STOP" protocol="HTTP" operation="POST" url="/clicktocall/stop" timeout="30000" is_req="yes" did="0">
				<oncall mmf="httpreq">
					<call type="SYS" function="upa_httpcall_read_ids(thread_id, conn_id, stream_id, version)"/>
					<call type="SYS" function="upa_httpcall_get_body(body)"/>
					<call function="parse_stopreq(body)"/>
				</oncall>
				<onsuccess>
					<call function="log_msg('SUCCESS')"/>
				</onsuccess>
				<onerror target="stop">
					<call function="log_msg('ERROR')"/>
				</onerror>
			</recv>

			<send name="SEND_CLICKTOCALL_STOP_RSP" protocol="HTTP" operation="POST" rcode="200" phrase="OK" did="0">
				<oncall>
					<call type="SYS" function="upa_httpcall_write_ids(thread_id, conn_id, stream_id, version)"/>
					<call type="SYS" function="upa_httpcall_set_header('Agent', 0, 'UANGEL')"/>
				</oncall>
			</send>

			<send name="SEND_BYE" protocol="SIP" operation="BYE" is_req="yes">
				<oncall>
                    <call type="SYS" function="gw_dlgsvc_on_send_outgoing_req('BYE', 'sip:07076008398@127.0.0.1:5068', 'sip:1004@127.0.0.1', 'sip:07076008398@127.0.0.1')"/>
                </oncall>
                <onerror target="stop"/>
			</send>

			<recv name="RECV_BYE_RSP" protocol="SIP" operation="BYE" is_req="no">
			</recv>


			<invoke name="SEND_CLICKTOCALL_RES" protocol="HTTP" operation="POST" url="http://192.168.1.74:18443/clicktocall/respond" version="1.0" timeout="5000" is_req="yes">
				<oncall>
					<call type="SYS" function="upa_httpcall_set_header('Agent', 0, 'UANGEL')"/>
					<call type="SYS" function="upa_httpcall_set_body( '{}', 'application/json')"/>
				</oncall>

				<onsuccess>
					<call function="log_msg('SUCCESS')"/>
					<call type="SYS" function="upa_httpcall_get_body(body)"/>
					<call function="dump_sdm()"/>
				</onsuccess>
				<onerror target="stop">
					<call function="log_msg('ERROR')"/>
				</onerror>
				<ontimeout target="stop">
					<call function="log_msg('TIMEOUT')"/>
				</ontimeout>
			</invoke>

			<stop name="stop">
				<onentry>
					<!--call function="dump_sdm"/-->
				</onentry>
			</stop>
		</fsm>
	</service>

</uxcutor>
